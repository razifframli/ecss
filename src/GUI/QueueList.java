/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueueList.java
 *
 * Created on Apr 12, 2011, 8:12:38 PM
 */

package GUI;

import Helper.S;
import javaapplication1.Consultation;

import api.Queue;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.Date;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Vector;

/**
 *
 * @author Chung Wei Ming
 */
public final class QueueList extends javax.swing.JFrame {

    /** Creates new form QueueList */
    Consultation cons;

 
    public QueueList() {
        initComponents();
        
    }

    public void list_Queue(int stat, String ch) {
        //Vector queueinfo = new Vector();
        Queue queue1 = new Queue();
        //try
        {
            try {
                Vector data = null;
                //queueinfo = queue1.getQueueNameList(ch);

                switch(stat) {
                    case 1:
                        data = queue1.getQueueNameList(ch, 1);
                        break;
                    case 2:
                        data = queue1.getQueueIcList(ch);
                        break;
                }
                
                S.oln("DATA: "+data);
                Vector<String> header = new Vector<String>();
                header.add("PMI_NO");
                header.add("NAME");
                header.add("EPISODE_TIME");
                header.add("CONSULTATION_ROOM");
                header.add("DOCTOR");
                header.add("STATUS");


                tblQueue.setModel(new javax.swing.table.DefaultTableModel(data, header) {

                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                });



            } catch (Exception ex) {
                Logger.getLogger(AppointmentList.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public QueueList(Consultation con) {
        initComponents();
        cons = con;
        Date date = new Date();
        tfieldDate.setDate(date);

    }

    public QueueList(LHSFrame con) {
        initComponents();
        Date date = new Date();
        tfieldDate.setDate(date);


        txt_pName.addKeyListener(new KeyAdapter() {

        public void keyReleased(KeyEvent e) {
            javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
            String ch = txt_pName.getText();


            if (!ch.equals(null)) {
                list_Queue(1, ch);

            } else {
            }


        }
    });





        txt_pIcNo.addKeyListener(new KeyAdapter() {
        public void keyReleased(KeyEvent e) {

                            String ch=txt_pIcNo.getText();


             if (!ch.equals(null)) {
                list_Queue(2, ch);

            } else {
            }


        }
        });

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        tfieldDate = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblQueue = new javax.swing.JTable();
        btnClose = new javax.swing.JButton();
        lbl_pIcNo = new javax.swing.JLabel();
        txt_pIcNo = new javax.swing.JTextField();
        lbl_pName = new javax.swing.JLabel();
        txt_pName = new javax.swing.JTextField();
        btn_pHistoryOk1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        label1.setBackground(new java.awt.Color(204, 204, 204));
        label1.setText("PATIENT QUEUE LIST");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setText("Date :");

        tfieldDate.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        tfieldDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tfieldDatePropertyChange(evt);
            }
        });

        tblQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PMI_NO", "NAME", "EPISODE_TIME", "CONSULTATION_ROOM", "DOCTOR", "STATUS"
            }
        ));
        tblQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblQueueMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblQueue);

        btnClose.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        lbl_pIcNo.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lbl_pIcNo.setText("New IC No:");

        txt_pIcNo.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txt_pIcNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_pIcNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_pIcNoKeyReleased(evt);
            }
        });

        lbl_pName.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lbl_pName.setText("Name:");

        txt_pName.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txt_pName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_pName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_pNameKeyReleased(evt);
            }
        });

        btn_pHistoryOk1.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        btn_pHistoryOk1.setText("OK");
        btn_pHistoryOk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pHistoryOk1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(404, 404, 404)
                .addComponent(btn_pHistoryOk1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 1065, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_pName, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txt_pName, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(lbl_pIcNo)
                        .addGap(18, 18, 18)
                        .addComponent(txt_pIcNo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(tfieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(165, 165, 165))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnClose)
                        .addGap(123, 123, 123))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btnClose)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfieldDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_pName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_pName, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                        .addComponent(txt_pIcNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_pIcNo)
                        .addComponent(jLabel1)))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_pHistoryOk1)
                .addGap(55, 55, 55))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1036, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1052, 622));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    //to close the patient queue list screen
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        Consultation.btn_exit.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    //to get patient queue from database
    private String selectedAppointment;
    //private String tabName;

    private void tblQueueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblQueueMouseClicked
        // TODO add your handling code here:
        int rowIndex = tblQueue.getSelectedRow();
        selectedAppointment =(String) tblQueue.getValueAt(rowIndex,0);
        //selectedAppointmentType =(String) tblAppointment.getValueAt(rowIndex,4);


//        Consultation register = new Consultation();
//        register.setSelectedAppointment(selectedAppointment);

        System.out.println("The value is : " + selectedAppointment);
    }//GEN-LAST:event_tblQueueMouseClicked

    private void tfieldDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tfieldDatePropertyChange
        // TODO add your handling code here:
        if(tfieldDate.getDate() != null)
             {
                Vector queueinfo= new Vector();
                Queue queue1 = new Queue();
                //try
                {

                    Format formatter = new SimpleDateFormat("dd/MM/yyyy");
                    String date = formatter.format(tfieldDate.getDate());
                try {
                    queueinfo = queue1.getQueueList(date);

                    if (queueinfo == null)
                     {
                        JOptionPane.showMessageDialog(null, "Patient information is not existed in the database. Please proceed to Patient Master Index Form to fill in the information!!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                     }
                    else
                     {
                        Vector data = queue1.getQueueList(date);
                        Vector<String> header = new Vector<String>();
                        header.add("PMI_NO");
                        header.add("NAME");
                        header.add("EPISODE_TIME");
                        header.add("CONSULTATION_ROOM");
                        header.add("DOCTOR");
                        header.add("STATUS");

                        tblQueue.setModel(new javax.swing.table.DefaultTableModel(data,header){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                        return false;
                        }});

                     }

                     } catch (Exception ex) {
                        Logger.getLogger(AppointmentList.class.getName()).log(Level.SEVERE, null, ex);
                     }
                  }

                }
    }//GEN-LAST:event_tfieldDatePropertyChange

    private void btn_pHistoryOk1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pHistoryOk1ActionPerformed
        // TODO add your handling code here:
        
        Consultation.btn_exit.setEnabled(false);
        
        int rowIndex = tblQueue.getSelectedRow();
        selectedAppointment =(String) tblQueue.getValueAt(rowIndex,0);
        String selectedTime =(String) tblQueue.getValueAt(rowIndex,2);
        
        //J.o("Test QueueList.java:430", "selectedAppointment: "+selectedAppointment+" | selectedTime: "+selectedTime, 1);

        cons.setSelectedAppointment(selectedAppointment, selectedTime);
        cons.setVisible(true);
        dispose();
}//GEN-LAST:event_btn_pHistoryOk1ActionPerformed

    private void txt_pNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_pNameKeyReleased
        // TODO add your handling code here:
        String ch = txt_pName.getText();
        txt_pIcNo.setText("");

        if (!ch.equals(null)) {
            list_Queue(1, ch);

        } else {
        }
    }//GEN-LAST:event_txt_pNameKeyReleased

    private void txt_pIcNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_pIcNoKeyReleased
        // TODO add your handling code here:
        String ch = txt_pIcNo.getText();
        txt_pName.setText("");

        if (!ch.equals(null)) {
            list_Queue(2, ch);

        } else {
        }
    }//GEN-LAST:event_txt_pIcNoKeyReleased

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueueList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btn_pHistoryOk1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private javax.swing.JLabel lbl_pIcNo;
    private javax.swing.JLabel lbl_pName;
    private javax.swing.JTable tblQueue;
    private com.toedter.calendar.JDateChooser tfieldDate;
    public javax.swing.JTextField txt_pIcNo;
    public javax.swing.JTextField txt_pName;
    // End of variables declaration//GEN-END:variables

}
