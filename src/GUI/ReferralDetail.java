/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReferralDetail.java
 *
 * Created on Mar 27, 2011, 6:09:18 PM
 */

package GUI;


import api.Referral;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.util.Date;
import java.text.DateFormat;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Vector;
/**
 *
 * @author Windows
 */
public class ReferralDetail extends javax.swing.JFrame {

   //private String selectedtab;
   private String tabName;
   private Vector<Vector<String>> data;
   private Vector<String> header;
   private String selectedName;
   private Registration registPage = null;
   //private String selectedNewIC;
   //private String selectedOldIC;
   //private String selectedID;

   
   public ReferralDetail(){
       
        initComponents();
        
        btnGrpSearchICReferral.add(rbNewReferral);
        btnGrpSearchICReferral.add(rbOldReferral);
        rbNewReferral.setSelected(true);
   }
    /** Creates new form ReferralDetail */
    public ReferralDetail(Registration regPage) {
        initComponents();
        this.registPage = regPage;
        btnGrpSearchICReferral.add(rbNewReferral);
        btnGrpSearchICReferral.add(rbOldReferral);
        rbNewReferral.setSelected(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpSearchICReferral = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        jPanel16 = new javax.swing.JPanel();
        label19 = new java.awt.Label();
        label39 = new java.awt.Label();
        label40 = new java.awt.Label();
        label41 = new java.awt.Label();
        label42 = new java.awt.Label();
        cboxIdTypeSearchReferral = new javax.swing.JComboBox();
        btnSearchReferral = new javax.swing.JButton();
        btnReadMyKadReferral = new javax.swing.JButton();
        tfieldPMISearchReferral = new javax.swing.JTextField();
        tfieldICSearchReferral = new javax.swing.JTextField();
        tfieldIDSearchReferral = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        rbNewReferral = new javax.swing.JRadioButton();
        rbOldReferral = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        btnCloseReferral = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReferralEmail = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                GetEmailReferralDetail(evt);
            }
        });

        label1.setBackground(new java.awt.Color(204, 204, 204));
        label1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label1.setText("Refferal Details");

        label19.setBackground(new java.awt.Color(204, 204, 204));
        label19.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label19.setText("SEARCH PATIENT");

        label39.setText("PMI No.");

        label40.setText("Id Type");

        label41.setText("IC No.");

        label42.setText("Identification No.");

        cboxIdTypeSearchReferral.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cboxIdTypeSearchReferral.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Id Type", "Police", "Army", "Foreigner" }));

        btnSearchReferral.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnSearchReferral.setText("Search");
        btnSearchReferral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchReferralActionPerformed(evt);
            }
        });

        btnReadMyKadReferral.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnReadMyKadReferral.setText("Read MyKAD Info");
        btnReadMyKadReferral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadMyKadReferralActionPerformed(evt);
            }
        });

        tfieldPMISearchReferral.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tfieldPMISearchReferral.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                EnablePMIReferral(evt);
            }
        });

        tfieldICSearchReferral.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tfieldICSearchReferral.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                EnableICReferral(evt);
            }
        });

        tfieldIDSearchReferral.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tfieldIDSearchReferral.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                EnableIDReferral(evt);
            }
        });

        rbNewReferral.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        rbNewReferral.setText("New");

        rbOldReferral.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        rbOldReferral.setText("Old");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbNewReferral)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbOldReferral)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbNewReferral, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbOldReferral, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label19, javax.swing.GroupLayout.DEFAULT_SIZE, 1336, Short.MAX_VALUE)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label40, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(111, 111, 111)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cboxIdTypeSearchReferral, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfieldPMISearchReferral, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                .addGap(123, 123, 123)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label42, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfieldIDSearchReferral)
                    .addComponent(tfieldICSearchReferral, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnSearchReferral)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReadMyKadReferral))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(194, 194, 194))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(label19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(label41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfieldICSearchReferral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(tfieldPMISearchReferral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(label39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label40, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxIdTypeSearchReferral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label42, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfieldIDSearchReferral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchReferral)
                        .addComponent(btnReadMyKadReferral)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        btnCloseReferral.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnCloseReferral.setText("Close");
        btnCloseReferral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseReferralActionPerformed(evt);
            }
        });

        tblReferralEmail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "NEW_IC_NO", "OLD_IC_NO", "ID_TYPE", "ID_NO", "REFERRAL_DATE", "REFERRAL_BY", "HEALTH_FACILITY_TYPE", "HEALTH_FACILITY_FROM"
            }
        ));
        tblReferralEmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReferralMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReferralEmail);

        jButton1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jButton1.setText("Main Page");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1054, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCloseReferral)
                .addContainerGap(105, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCloseReferral)
                        .addComponent(jButton1)))
                .addContainerGap(239, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 1336, Short.MAX_VALUE)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseReferralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseReferralActionPerformed
        // TODO add your handling code here:
        this.dispose();
}//GEN-LAST:event_btnCloseReferralActionPerformed
    
    //to enable pmino textfield referral detail only
    private void EnablePMIReferral(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EnablePMIReferral
        // TODO add your handling code here:
        
        if(tfieldPMISearchReferral.getText().length() != 0)
            {
             tfieldICSearchReferral.setEditable(false);
             tfieldIDSearchReferral.setEditable(false);
             cboxIdTypeSearchReferral.setEnabled(false);
            }else
            {
             tfieldICSearchReferral.setEditable(true);
             tfieldIDSearchReferral.setEditable(true);
             cboxIdTypeSearchReferral.setEnabled(true);
            }

    }//GEN-LAST:event_EnablePMIReferral
    
    //to enable icno textfield referral only
    private void EnableICReferral(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EnableICReferral
        // TODO add your handling code here:
         if(tfieldICSearchReferral.getText().length() != 0)
            {
             tfieldPMISearchReferral.setEditable(false);
             tfieldIDSearchReferral.setEditable(false);
             cboxIdTypeSearchReferral.setEnabled(false);
            }else
            {
             tfieldPMISearchReferral.setEditable(true);
             tfieldIDSearchReferral.setEditable(true);
             cboxIdTypeSearchReferral.setEnabled(true);
            }
    }//GEN-LAST:event_EnableICReferral
    
    //to enable idno textfield referral only
    private void EnableIDReferral(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EnableIDReferral
        // TODO add your handling code here:
         if(tfieldIDSearchReferral.getText().length() != 0)
            {
             tfieldPMISearchReferral.setEditable(false);
             tfieldICSearchReferral.setEditable(false);
            }else
            {
             tfieldPMISearchReferral.setEditable(true);
             tfieldICSearchReferral.setEditable(true);
            }
    }//GEN-LAST:event_EnableIDReferral

    
    //search existing patient information using MyKad

    private void btnReadMyKadReferralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadMyKadReferralActionPerformed
        // TODO add your handling code here:

            MyKad mykad = new MyKad();
            mykad.start();
            mykad.useJPN();
            mykad.readData();

            Vector< Vector<String>> ReferralInfoMyKad = new Vector< Vector<String>>();
            Vector ReferralInfo4= new Vector();
            Referral patientReferral4 = new Referral();

                    try
                    {
                        ReferralInfoMyKad = patientReferral4.getReferralBiodataUsingMyKad(mykad.ic);

                        if (ReferralInfo4 == null)
                         {
                            JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information !!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                         }

                        else{
                                data = patientReferral4.getReferralBiodataUsingMyKad(mykad.ic);
                                header = new Vector<String>();
                                header.add("NAME");
                                header.add("NEW_IC_NO");
                                header.add("OLD_IC_NO");
                                header.add("ID_TYPE");
                                header.add("ID_NO");
                                header.add("REFERRAL_DATE");
                                header.add("REFERRAL_BY");
                                header.add("HEALTH_FACILITY_TYPE");
                                header.add("HEALTH_FACILITY_FROM");


                                tblReferralEmail.setModel(new javax.swing.table.DefaultTableModel(data,header){
                                @Override
                                public boolean isCellEditable(int row, int column) {
                                return false;
                                }});
                        }
                        } catch (Exception ex) {
                        Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
                     }

                /*String[] RegisterInfoMyKad={};
                Referral patientRegUseMyKad = new Referral();
                try {
                    RegisterInfoMyKad = patientRegUseMyKad.getReferralBiodataUsingMyKad(mykad.ic);

                if (RegisterInfoMyKad[0] == null)
                {
                    JOptionPane.showMessageDialog(null, "Patient information is not existed in the database. Please proceed to Patient Master Index Form to fill in information!!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                    new Registration().setVisible(true);
                   
                }
                else
                {
                    //tfieldPMINoReferral.setText(RegisterInfoMyKad[0]);
                }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                     Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                }

            mykad.stop();
*/
    }//GEN-LAST:event_btnReadMyKadReferralActionPerformed
    
    
    //to search patient pmino from database
    private void btnSearchReferralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchReferralActionPerformed
        // TODO add your handling code here:

        if (tfieldPMISearchReferral.getText() != null && (tfieldPMISearchReferral.getText().length() != 0))
           {
                    Vector ReferralInfo= new Vector();
                    Referral patientReferral = new Referral();

                    try
                    {
                        ReferralInfo = patientReferral.getEmailReferralUsingPMI(tfieldPMISearchReferral.getText(),tfieldPMISearchReferral.getText(),tfieldPMISearchReferral.getText());

                        if (ReferralInfo == null)
                         {
                            JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information !!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                         }

                        else{
                                data = patientReferral.getEmailReferralUsingPMI(tfieldPMISearchReferral.getText(),tfieldPMISearchReferral.getText(),tfieldPMISearchReferral.getText());
                                header = new Vector<String>();
                                header.add("NAME");
                                header.add("NEW_IC_NO");
                                header.add("OLD_IC_NO");
                                header.add("ID_TYPE");
                                header.add("ID_NO");
                                header.add("REFERRAL_DATE");
                                header.add("REFERRAL_BY");
                                header.add("HEALTH_FACILITY_TYPE");
                                header.add("HEALTH_FACILITY_FROM");


                                tblReferralEmail.setModel(new javax.swing.table.DefaultTableModel(data,header){
                                @Override
                                public boolean isCellEditable(int row, int column) {
                                return false;
                                }});
                        }
                        } catch (Exception ex) {
                        Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
                     }
        }
  
        if (tfieldICSearchReferral.getText() != null && rbNewReferral.isSelected() == true && (tfieldICSearchReferral.getText().length() != 0))
             {
                System.out.println(tfieldICSearchReferral.getText());
 
                    Vector ReferralInfo1= new Vector();
                    Referral patientReferral1 = new Referral();
                    
                    try 
                    {
                        ReferralInfo1 = patientReferral1.getEmailReferralUsingNewIC(tfieldICSearchReferral.getText());

                        if (ReferralInfo1 == null)
                         {
                            JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information !!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                         }
    
                        else{
                                data = patientReferral1.getEmailReferralUsingNewIC(tfieldICSearchReferral.getText());
                                header = new Vector<String>();
                                header.add("NAME");
                                header.add("NEW_IC_NO");
                                header.add("OLD_IC_NO");
                                header.add("ID_TYPE");
                                header.add("ID_NO");
                                header.add("REFERRAL_DATE");
                                header.add("REFERRAL_BY");
                                header.add("HEALTH_FACILITY_TYPE");
                                header.add("HEALTH_FACILITY_FROM");


                                tblReferralEmail.setModel(new javax.swing.table.DefaultTableModel(data,header){
                                @Override
                                public boolean isCellEditable(int row, int column) {
                                return false;
                                }});
                        }
                        } catch (Exception ex) {
                        Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
                     }

                 }



         if(tfieldICSearchReferral.getText() != null && rbOldReferral.isSelected() == true  && (tfieldICSearchReferral.getText().length() != 0))
             {
                System.out.println(tfieldICSearchReferral.getText());

                    Vector ReferralInfo2= new Vector();
                    Referral patientReferral2 = new Referral();

                    try
                    {
                        ReferralInfo2 = patientReferral2.getEmailReferralUsingOldIC(tfieldICSearchReferral.getText());

                        if (ReferralInfo2 == null)
                         {
                            JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information !!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                         }

                        else{
                                data = patientReferral2.getEmailReferralUsingOldIC(tfieldICSearchReferral.getText());
                                header = new Vector<String>();
                                header.add("NAME");
                                header.add("NEW_IC_NO");
                                header.add("OLD_IC_NO");
                                header.add("ID_TYPE");
                                header.add("ID_NO");
                                header.add("REFERRAL_DATE");
                                header.add("REFERRAL_BY");
                                header.add("HEALTH_FACILITY_TYPE");
                                header.add("HEALTH_FACILITY_FROM");


                                tblReferralEmail.setModel(new javax.swing.table.DefaultTableModel(data,header){
                                @Override
                                public boolean isCellEditable(int row, int column) {
                                return false;
                                }});
                        }
                        } catch (Exception ex) {
                        Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
                     }
                }


         if (tfieldIDSearchReferral.getText() != null && (cboxIdTypeSearchReferral.getSelectedItem().toString() != null) && (tfieldIDSearchReferral.getText().length() != 0))

             {
                Vector ReferralInfo3= new Vector();
                Referral patientReferral3 = new Referral();

                try
                {
                    ReferralInfo3 = patientReferral3.getEmailReferralUsingID(tfieldIDSearchReferral.getText(), cboxIdTypeSearchReferral.getSelectedItem().toString());

                     if (ReferralInfo3 == null)
                 {
                    JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information!!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                 }
                else
                      {
                        data = patientReferral3.getEmailReferralUsingID(tfieldIDSearchReferral.getText(),cboxIdTypeSearchReferral.getSelectedItem().toString());

                        header = new Vector<String>();
                        header.add("NAME");
                        header.add("NEW_IC_NO");
                        header.add("OLD_IC_NO");
                        header.add("ID_TYPE");
                        header.add("ID_NO");
                        header.add("REFERRAL_DATE");
                        header.add("REFERRAL_BY");
                        header.add("HEALTH_FACILITY_TYPE");
                        header.add("HEALTH_FACILITY_FROM");


                        tblReferralEmail.setModel(new javax.swing.table.DefaultTableModel(data,header)
                        {
                            @Override
                            public boolean isCellEditable(int row, int column)
                            {
                                return false;
                            }
                        });
                      }

                     } catch (Exception ex)
                     {
                        Logger.getLogger(AppointmentList.class.getName()).log(Level.SEVERE, null, ex);
                     }
                  }

            
               if (tfieldPMISearchReferral.getText().length() == 0 && (tfieldICSearchReferral.getText().length() == 0) && (tfieldIDSearchReferral.getText().length() == 0))
               {
                   JOptionPane.showMessageDialog(null, "Please key in PMI No or IC No or Identification No to continue searching process!!!", "Error",JOptionPane.INFORMATION_MESSAGE);
               }

            
    }//GEN-LAST:event_btnSearchReferralActionPerformed
    
    //to get referral detail from email
    private void GetEmailReferralDetail(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_GetEmailReferralDetail
        // TODO add your handling code here:

        {
                Vector referralEmailInfo= new Vector();
                Referral referralEmailInformation = new Referral();
                
            try {
                data = referralEmailInformation.getEmailReferral();
            } catch (Exception ex) {
                Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
            }

                        header = new Vector<String>();
                        header.add("NAME");
                        header.add("NEW_IC_NO");
                        header.add("OLD_IC_NO");
                        header.add("ID_TYPE");
                        header.add("ID_NO");
                        header.add("REFERRAL_DATE");
                        header.add("REFERRAL_BY");
                        header.add("HEALTH_FACILITY_TYPE");
                        header.add("HEALTH_FACILITY_FROM");


                        tblReferralEmail.setModel(new javax.swing.table.DefaultTableModel(data,header){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                        return false;
                        }});

                     }
    }//GEN-LAST:event_GetEmailReferralDetail
    
   //click the selected row and display the row data in registration
    private void tblReferralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReferralMouseClicked
        // TODO add your handling code here:
         if (evt.getClickCount() == 2) {
        int rowIndex = tblReferralEmail.getSelectedRow();
        selectedName = (String) tblReferralEmail.getValueAt(rowIndex,0);
        System.out.println(selectedName);
        //selectedNewIC =(String) tblReferralEmail.getValueAt(rowIndex,1);
        //selectedOldIC =(String) tblReferralEmail.getValueAt(rowIndex,2);
        //selectedID =(String) tblReferralEmail.getValueAt(rowIndex,4);
        
        //String[] CheckDataExistence={};
       //Referral patientReferralEmail = new Referral();
                //try {
                   // CheckDataExistence = patientReferralEmail.getEmailReferral(selectedReferral);

               // if (CheckDataExistence[0] == null)
              //  {
                  //  JOptionPane.showMessageDialog(null, "Patient data is not exist in the database. Please proceed to Patient Master Index Form to fill in information!!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                  //  new Registration().setVisible(true);
                                 
//        Registration register = new Registration();
//        register.setVisible(true);
//        register.setSelectedName(selectedName,tabName);
        registPage.setSelectedName(selectedName,tabName);
        registPage.show();

       /* try {
            Referral.deleteEmailReferral(selectedName);
            //register.setSelectedOldIC(selectedOldIC,tabName);
            //register.setSelectedNewIC(selectedNewIC,tabName);
            //}
            // } catch (ClassNotFoundException ex) {
            // Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
            //} catch (SQLException ex) {
            //  Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
            // }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
        }*/

            this.dispose();
         }
    }//GEN-LAST:event_tblReferralMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MainPage page = new MainPage();
        page.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed




     public void getLocation(String tabName)
    {
        this.tabName = tabName;
    }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReferralDetail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCloseReferral;
    private javax.swing.ButtonGroup btnGrpSearchICReferral;
    private javax.swing.JButton btnReadMyKadReferral;
    private javax.swing.JButton btnSearchReferral;
    private javax.swing.JComboBox cboxIdTypeSearchReferral;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private java.awt.Label label19;
    private java.awt.Label label39;
    private java.awt.Label label40;
    private java.awt.Label label41;
    private java.awt.Label label42;
    private javax.swing.JRadioButton rbNewReferral;
    private javax.swing.JRadioButton rbOldReferral;
    private javax.swing.JTable tblReferralEmail;
    private javax.swing.JTextField tfieldICSearchReferral;
    private javax.swing.JTextField tfieldIDSearchReferral;
    private javax.swing.JTextField tfieldPMISearchReferral;
    // End of variables declaration//GEN-END:variables

}
