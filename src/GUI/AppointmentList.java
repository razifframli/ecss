/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Appointment.java
 *
 * Created on Apr 6, 2011, 5:47:39 AM
 */

package GUI;

import api.Appointment;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Vector;

/**

/**
 *
 * @author WC
 */
public class AppointmentList extends javax.swing.JFrame {

    private Vector<Vector<String>> data;
    private Vector<String> header;
    private String selectedAppointment;
    private Registration registrationPage = null;
   

    /** Creates new form Appointment */
    public AppointmentList(){
      initComponents();

        btnGrpSearchICAppointment.add(rbNewAppointment);
        btnGrpSearchICAppointment.add(rbOldAppointment);
        rbNewAppointment.setSelected(true);
    
    }
    public AppointmentList(Registration regPage) {
        initComponents();
        registrationPage= regPage;
        btnGrpSearchICAppointment.add(rbNewAppointment);
        btnGrpSearchICAppointment.add(rbOldAppointment);
        rbNewAppointment.setSelected(true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpSearchICAppointment = new javax.swing.ButtonGroup();
        Appointment = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        btnCloseApppintment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        label19 = new java.awt.Label();
        label39 = new java.awt.Label();
        label40 = new java.awt.Label();
        label41 = new java.awt.Label();
        label42 = new java.awt.Label();
        cboxIdTypeSearchAppointment = new javax.swing.JComboBox();
        btnSearchReferral = new javax.swing.JButton();
        btnReadMyKadReferral = new javax.swing.JButton();
        tfieldPMISearchAppointment = new javax.swing.JTextField();
        tfieldICSearchAppointment = new javax.swing.JTextField();
        tfieldIDSearchAppointment = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        rbNewAppointment = new javax.swing.JRadioButton();
        rbOldAppointment = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                GetAppointment(evt);
            }
        });

        Appointment.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        label1.setBackground(new java.awt.Color(204, 204, 204));
        label1.setText("APPOINTMENT LIST");

        btnCloseApppintment.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnCloseApppintment.setText("Close");
        btnCloseApppintment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseApppintmentActionPerformed(evt);
            }
        });

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PMI_NO", "PATIENT_NAME", "APPOINTMENT_DATE", "APPOINTMENT_TIME", "APPOINTMENT_TYPE"
            }
        ));
        tblAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppointmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAppointment);

        label19.setBackground(new java.awt.Color(204, 204, 204));
        label19.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label19.setText("SEARCH PATIENT");

        label39.setText("PMI No.");

        label40.setText("Id Type");

        label41.setText("IC No.");

        label42.setText("Identification No.");

        cboxIdTypeSearchAppointment.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cboxIdTypeSearchAppointment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Id Type", "Police", "Army", "Foreigner" }));

        btnSearchReferral.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnSearchReferral.setText("Search");
        btnSearchReferral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchReferralActionPerformed(evt);
            }
        });

        btnReadMyKadReferral.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnReadMyKadReferral.setText("Read MyKAD Info");
        btnReadMyKadReferral.setEnabled(false);
        btnReadMyKadReferral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadMyKadReferralActionPerformed(evt);
            }
        });

        tfieldPMISearchAppointment.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tfieldPMISearchAppointment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfieldPMISearchAppointmentEnablePMIReferral(evt);
            }
        });

        tfieldICSearchAppointment.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tfieldICSearchAppointment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfieldICSearchAppointmentEnableICReferral(evt);
            }
        });

        tfieldIDSearchAppointment.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tfieldIDSearchAppointment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfieldIDSearchAppointmentEnableIDReferral(evt);
            }
        });

        rbNewAppointment.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        rbNewAppointment.setText("New");

        rbOldAppointment.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        rbOldAppointment.setText("Old");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbNewAppointment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbOldAppointment)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbNewAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbOldAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label40, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfieldPMISearchAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxIdTypeSearchAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(label42, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfieldIDSearchAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(label41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tfieldICSearchAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(btnSearchReferral)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReadMyKadReferral))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(label19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfieldPMISearchAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tfieldICSearchAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(label41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label40, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboxIdTypeSearchAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfieldIDSearchAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label42, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearchReferral)
                            .addComponent(btnReadMyKadReferral))))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jButton1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jButton1.setText("Main Page");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AppointmentLayout = new javax.swing.GroupLayout(Appointment);
        Appointment.setLayout(AppointmentLayout);
        AppointmentLayout.setHorizontalGroup(
            AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AppointmentLayout.createSequentialGroup()
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
            .addGroup(AppointmentLayout.createSequentialGroup()
                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(AppointmentLayout.createSequentialGroup()
                .addGroup(AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AppointmentLayout.createSequentialGroup()
                        .addGap(405, 405, 405)
                        .addComponent(jButton1)
                        .addGap(177, 177, 177)
                        .addComponent(btnCloseApppintment))
                    .addGroup(AppointmentLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1051, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        AppointmentLayout.setVerticalGroup(
            AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AppointmentLayout.createSequentialGroup()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnCloseApppintment))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Appointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Appointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1143, 664));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    //close appointment list form
    private void btnCloseApppintmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseApppintmentActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCloseApppintmentActionPerformed
  
    //click the selected row and display the row data in registration
    private void tblAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentMouseClicked
        // TODO add your handling code here:
    if (evt.getClickCount() == 2) {
        int rowIndex = tblAppointment.getSelectedRow();
        selectedAppointment =(String) tblAppointment.getValueAt(rowIndex,0);
        //selectedAppointmentType =(String) tblAppointment.getValueAt(rowIndex,4);


//        Registration register = new Registration();
//        register.setVisible(true);
       registrationPage.setSelectedAppointment(selectedAppointment,tabName);
       registrationPage.show();
       dispose();
        //Appointment.deleteAppointment(selectedAppointment);
        //register.setSelectedAppointmentType(selectedAppointmentType,tabName);
     } 
    }//GEN-LAST:event_tblAppointmentMouseClicked

    private void btnSearchReferralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchReferralActionPerformed
        // TODO add your handling code here:

        //Vector AppointmentInfo= new Vector();
        Appointment patientAppointmentx = new Appointment();

        try {
                //AppointmentInfo = patientAppointment.getAppointmentUsingPMI(tfieldPMISearchAppointment.getText());

                //if (AppointmentInfo == null) {
            // JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information !!!", "Error",JOptionPane.INFORMATION_MESSAGE);
            //}
            // else{
            data = patientAppointmentx.getAppointment();
            header = new Vector<String>();
            header.add("PMI_NO");
            header.add("PATIENT_NAME");
            header.add("APPOINTMENT_DATE");
            header.add("APPOINTMENT_TIME");
            header.add("APPOINTMENT_TYPE");

            tblAppointment.setModel(new javax.swing.table.DefaultTableModel(data, header) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            });
            // }
        } catch (Exception ex) {
            Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (tfieldPMISearchAppointment.getText() != null && (tfieldPMISearchAppointment.getText().length() != 0)) {

            //Vector AppointmentInfo= new Vector();
            Appointment patientAppointment = new Appointment();

            try {
                //AppointmentInfo = patientAppointment.getAppointmentUsingPMI(tfieldPMISearchAppointment.getText());

                //if (AppointmentInfo == null) {
                   // JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information !!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                //}

               // else{
                    data = patientAppointment.getAppointmentUsingPMI(tfieldPMISearchAppointment.getText());
                    header = new Vector<String>();
                    header.add("PMI_NO");
                    header.add("PATIENT_NAME");
                    header.add("APPOINTMENT_DATE");
                    header.add("APPOINTMENT_TIME");
                    header.add("APPOINTMENT_TYPE");
                                    
                    tblAppointment.setModel(new javax.swing.table.DefaultTableModel(data,header){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }});
               // }
            } catch (Exception ex) {
                Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (tfieldICSearchAppointment.getText() != null && rbNewAppointment.isSelected() == true && (tfieldICSearchAppointment.getText().length() != 0)) {
            System.out.println(tfieldICSearchAppointment.getText());

            Vector AppointmentInfo1= new Vector();
            Appointment patientAppointment1 = new Appointment();

            try {
                AppointmentInfo1 = patientAppointment1.getAppointmentUsingNewIC(tfieldICSearchAppointment.getText());

                if (AppointmentInfo1 == null) {
                    JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information !!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                }

                else{
                    data = patientAppointment1.getAppointmentUsingNewIC(tfieldICSearchAppointment.getText());
                    header = new Vector<String>();
                    header.add("PMI_NO");
                    header.add("PATIENT_NAME");
                    header.add("APPOINTMENT_DATE");
                    header.add("APPOINTMENT_TIME");
                    header.add("APPOINTMENT_TYPE");


                    tblAppointment.setModel(new javax.swing.table.DefaultTableModel(data,header){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }});
                }
            } catch (Exception ex) {
                Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
            }

        }



        if(tfieldICSearchAppointment.getText() != null && rbOldAppointment.isSelected() == true  && (tfieldICSearchAppointment.getText().length() != 0)) {
            System.out.println(tfieldICSearchAppointment.getText());

            Vector AppointmentInfo2= new Vector();
            Appointment patientAppointment2 = new Appointment();

            try {
                AppointmentInfo2 = patientAppointment2.getAppointmentUsingOldIC(tfieldICSearchAppointment.getText());

                if (AppointmentInfo2 == null) {
                    JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information !!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                }

                else{
                    data = patientAppointment2.getAppointmentUsingOldIC(tfieldICSearchAppointment.getText());
                    header = new Vector<String>();
                    header.add("PMI_NO");
                    header.add("PATIENT_NAME");
                    header.add("APPOINTMENT_DATE");
                    header.add("APPOINTMENT_TIME");
                    header.add("APPOINTMENT_TYPE");


                    tblAppointment.setModel(new javax.swing.table.DefaultTableModel(data,header){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }});
                }
            } catch (Exception ex) {
                Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


        if (tfieldIDSearchAppointment.getText() != null && (cboxIdTypeSearchAppointment.getSelectedItem().toString() != null) && (tfieldIDSearchAppointment.getText().length() != 0))

        {
            Vector ReferralInfo3= new Vector();
            Appointment patientAppointment3 = new Appointment();

            try {
                ReferralInfo3 = patientAppointment3.getAppointmentUsingID(tfieldIDSearchAppointment.getText(), cboxIdTypeSearchAppointment.getSelectedItem().toString());

                if (ReferralInfo3 == null) {
                    JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information!!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                } else {
                    data = patientAppointment3.getAppointmentUsingID(tfieldIDSearchAppointment.getText(),cboxIdTypeSearchAppointment.getSelectedItem().toString());

                    header = new Vector<String>();
                    header.add("PMI_NO");
                    header.add("PATIENT_NAME");
                    header.add("APPOINTMENT_DATE");
                    header.add("APPOINTMENT_TIME");
                    header.add("APPOINTMENT_TYPE");


                    tblAppointment.setModel(new javax.swing.table.DefaultTableModel(data,header) {
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }
                    });
                }

            } catch (Exception ex) {
                Logger.getLogger(AppointmentList.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


        if (tfieldPMISearchAppointment.getText().length() == 0 && (tfieldICSearchAppointment.getText().length() == 0) && (tfieldIDSearchAppointment.getText().length() == 0)) {
            JOptionPane.showMessageDialog(null, "Please key in PMI No or IC No or Identification No to continue searching process!!!", "Error",JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnSearchReferralActionPerformed

    private void btnReadMyKadReferralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadMyKadReferralActionPerformed
        // TODO add your handling code here:

            MyKad mykad = new MyKad();
            mykad.start();
            mykad.useJPN();
            mykad.readData();

            Vector< Vector<String>> AppointmentInfoMyKad = new Vector<Vector<String>>();
            Vector AppointmentInfo4= new Vector();
            Appointment patientAppointment4 = new Appointment();

                    try
                    {
                        AppointmentInfoMyKad = patientAppointment4.getAppointmentBiodataUsingMyKad(mykad.ic);

                        if (AppointmentInfo4 == null)
                         {
                            JOptionPane.showMessageDialog(null, "Patient Information is not existed in the database. Please proceed to Patient Master Index Form to fill in information !!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                         }

                        else{
                                data = patientAppointment4.getAppointmentBiodataUsingMyKad(mykad.ic);
                                header = new Vector<String>();
                                header.add("PMI_NO");
                                header.add("PATIENT_NAME");
                                header.add("APPOINTMENT_DATE");
                                header.add("APPOINTMENT_TIME");
                                header.add("APPOINTMENT_TYPE");
                                

                                tblAppointment.setModel(new javax.swing.table.DefaultTableModel(data,header){
                                @Override
                                public boolean isCellEditable(int row, int column) {
                                return false;
                                }});
                        }
                        } catch (Exception ex) {
                        Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
                     }

                /*String[] RegisterInfoMyKad={};
                Referral patientRegUseMyKad = new Referral();
                try {
                    RegisterInfoMyKad = patientRegUseMyKad.getReferralBiodataUsingMyKad(mykad.ic);

                if (RegisterInfoMyKad[0] == null)
                {
                    JOptionPane.showMessageDialog(null, "Patient information is not existed in the database. Please proceed to Patient Master Index Form to fill in information!!!", "Error",JOptionPane.INFORMATION_MESSAGE);
                    new Registration().setVisible(true);

                }
                else
                {
                    //tfieldPMINoReferral.setText(RegisterInfoMyKad[0]);
                }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                     Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                }

            mykad.stop();
                 */
}//GEN-LAST:event_btnReadMyKadReferralActionPerformed


    private void tfieldPMISearchAppointmentEnablePMIReferral(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfieldPMISearchAppointmentEnablePMIReferral
        // TODO add your handling code here:

        if(tfieldPMISearchAppointment.getText().length() != 0) {
            tfieldICSearchAppointment.setEditable(false);
            tfieldIDSearchAppointment.setEditable(false);
            cboxIdTypeSearchAppointment.setEnabled(false);
        }else {
            tfieldICSearchAppointment.setEditable(true);
            tfieldIDSearchAppointment.setEditable(true);
            cboxIdTypeSearchAppointment.setEnabled(true);
        }
    }//GEN-LAST:event_tfieldPMISearchAppointmentEnablePMIReferral

    private void tfieldICSearchAppointmentEnableICReferral(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfieldICSearchAppointmentEnableICReferral
        // TODO add your handling code here:
        if(tfieldICSearchAppointment.getText().length() != 0) {
            tfieldPMISearchAppointment.setEditable(false);
            tfieldIDSearchAppointment.setEditable(false);
            cboxIdTypeSearchAppointment.setEnabled(false);
        }else {
            tfieldPMISearchAppointment.setEditable(true);
            tfieldIDSearchAppointment.setEditable(true);
            cboxIdTypeSearchAppointment.setEnabled(true);
        }
}//GEN-LAST:event_tfieldICSearchAppointmentEnableICReferral

    private void tfieldIDSearchAppointmentEnableIDReferral(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfieldIDSearchAppointmentEnableIDReferral
        // TODO add your handling code here:
        if(tfieldIDSearchAppointment.getText().length() != 0) {
            tfieldPMISearchAppointment.setEditable(false);
            tfieldICSearchAppointment.setEditable(false);
        }else {
            tfieldPMISearchAppointment.setEditable(true);
            tfieldICSearchAppointment.setEditable(true);
        }
}//GEN-LAST:event_tfieldIDSearchAppointmentEnableIDReferral
    
    //to get appointment detail from the database
    private void GetAppointment(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_GetAppointment
        // TODO add your handling code here:

         Vector appointment= new Vector();
                Appointment appointmentInformation = new Appointment();

            try {
                data = appointmentInformation.getAppointment();
            } catch (Exception ex) {
                Logger.getLogger(ReferralDetail.class.getName()).log(Level.SEVERE, null, ex);
            }

                        header = new Vector<String>();
                        header.add("PMI_NO");
                        header.add("PATIENT_NAME");
                        header.add("APPOINTMENT_DATE");
                        header.add("APPOINTMENT_TIME");
                        header.add("APPOINTMENT_TYPE");



                        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(data,header){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                        return false;
                        }});

    }//GEN-LAST:event_GetAppointment

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MainPage page = new MainPage();
        page.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed


    public void getLocation(String tabName)
    {
        this.tabName = tabName;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // new AppointmentList().setVisible(true);

                // try
                //{
                    new AppointmentList().setVisible(true);
               // }catch(Exception e){e.printStackTrace();}
            }
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Appointment;
    private javax.swing.JButton btnCloseApppintment;
    private javax.swing.ButtonGroup btnGrpSearchICAppointment;
    private javax.swing.JButton btnReadMyKadReferral;
    private javax.swing.JButton btnSearchReferral;
    private javax.swing.JComboBox cboxIdTypeSearchAppointment;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private java.awt.Label label19;
    private java.awt.Label label39;
    private java.awt.Label label40;
    private java.awt.Label label41;
    private java.awt.Label label42;
    private javax.swing.JRadioButton rbNewAppointment;
    private javax.swing.JRadioButton rbOldAppointment;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTextField tfieldICSearchAppointment;
    private javax.swing.JTextField tfieldIDSearchAppointment;
    private javax.swing.JTextField tfieldPMISearchAppointment;
    // End of variables declaration//GEN-END:variables
    private String tabName;
}
