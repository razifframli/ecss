/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PrescriptionNote.java
 *
 * Created on Jun 10, 2011, 1:00:04 AM
 */

package GUI;
import Helper.S;
import Helper.Session;
import Process.MainRetrieval;

//first pdf
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import java.awt.Desktop;
//import com.itextpdf.text.Paragraph;
//import com.itextpdf.text.Font;
//import com.itextpdf.text.Document;
//import com.itextpdf.text.DocumentException;
//import com.itextpdf.text.BaseColor;

import java.io.*;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import library.Func;
import oms.rmi.server.Message;

/**
 *
 * @author phoebe
 */
public class PrescriptionNote extends javax.swing.JFrame {
    
    private static String FILE = "asset/printpdf.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 10,
        Font.UNDERLINE, BaseColor.DARK_GRAY);

    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 8,
        Font.NORMAL);
    private static Font sBold = new Font(Font.FontFamily.TIMES_ROMAN, 9,
        Font.BOLD);
  
    private String patientName;
    private String gender;
    private String dob;
    private String add;
    private String add1;
    private String add2;
    private String add3;
    private String add4;
    private String drugName;
    private String route;
    private String mdcCode;
    private String dosage;
    //private String dosage1;
    private String dosageForm;
    private String frequency;
    private String instruction;
    private Double qtyPerTime;
    private String qtyPerTime1;
    private int duration;
    private String duration1;
    private int frequency1;
    private double totalQty;
    private String totalQty1;
    private String dispenseDate1;
    private String productCode;
    private String productName;
    private String strength;
    private String qtydispensed;
    private String orderStatus;
    private String ono;
    
    

    /** Creates new form PrescriptionNote */
    public PrescriptionNote() {
       super ("Print Prescription Note");
       initComponents();
       
        String tooltipText;
        tooltipText = "Print Prescription";
        btn_pdf.setToolTipText(tooltipText);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_prescriptionSlip = new java.awt.Label();
        lbl_patientName = new javax.swing.JLabel();
        lbl_patientName1 = new javax.swing.JLabel();
        lbl_gender = new javax.swing.JLabel();
        lbl_gender1 = new javax.swing.JLabel();
        lbl_DOB = new javax.swing.JLabel();
        lbl_DOB1 = new javax.swing.JLabel();
        lbl_address = new javax.swing.JLabel();
        lbl_address1 = new javax.swing.JLabel();
        lbl_prescripDate = new javax.swing.JLabel();
        lbl_prescripDate1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_prescriptionSlip = new javax.swing.JTable();
        lbl_prescribeBy = new javax.swing.JLabel();
        lbl_prescribeBy1 = new javax.swing.JLabel();
        btn_close = new javax.swing.JButton();
        btn_pdf = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lbl_ono = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        lbl_prescriptionSlip.setAlignment(java.awt.Label.CENTER);
        lbl_prescriptionSlip.setBackground(new java.awt.Color(51, 51, 255));
        lbl_prescriptionSlip.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbl_prescriptionSlip.setForeground(new java.awt.Color(255, 255, 255));
        lbl_prescriptionSlip.setText("Prescription Slip");

        lbl_patientName.setText("Patient Name :");

        lbl_gender.setText("Gender :");

        lbl_DOB.setText("DOB :");

        lbl_address.setText("Address :");

        lbl_prescripDate.setText("Prescription Date :");

        tbl_prescriptionSlip.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name", "Dosage", "Dosage Form", "Route", "Frequency", "Instruction", "Qty", "Dur", "Tot Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl_prescriptionSlip);
        tbl_prescriptionSlip.getColumnModel().getColumn(0).setPreferredWidth(250);
        tbl_prescriptionSlip.getColumnModel().getColumn(1).setPreferredWidth(35);
        tbl_prescriptionSlip.getColumnModel().getColumn(2).setPreferredWidth(55);
        tbl_prescriptionSlip.getColumnModel().getColumn(3).setPreferredWidth(35);
        tbl_prescriptionSlip.getColumnModel().getColumn(6).setPreferredWidth(35);
        tbl_prescriptionSlip.getColumnModel().getColumn(7).setPreferredWidth(35);
        tbl_prescriptionSlip.getColumnModel().getColumn(8).setPreferredWidth(45);

        lbl_prescribeBy.setText("Prescribe by :");

        btn_close.setText("Close");
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });

        btn_pdf.setText("Print As Pdf");
        btn_pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pdfActionPerformed(evt);
            }
        });

        jLabel1.setText("Order No :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_prescriptionSlip, javax.swing.GroupLayout.DEFAULT_SIZE, 1021, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_patientName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_patientName1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbl_gender)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_gender1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_address)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_address1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_DOB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_DOB1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_prescripDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_prescripDate1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_prescribeBy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_prescribeBy1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_ono, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_pdf)
                        .addGap(18, 18, 18)
                        .addComponent(btn_close)
                        .addGap(53, 53, 53)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbl_prescriptionSlip, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_patientName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_patientName1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_gender, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_gender1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_DOB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_DOB1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_address)
                        .addComponent(lbl_address1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_prescripDate)
                        .addComponent(lbl_prescripDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_prescribeBy, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_prescribeBy1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_pdf, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_close, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(372, 372, 372)
                .addComponent(lbl_ono)
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btn_closeActionPerformed
void setPrescription(String oNo,String pmiNo,String staffName) {
       
        //search patient biodata
        try
        {
            ResultSet results = null;
                    
            if (Session.getPrev_stat()) {
                // fire to server port 1099
                ArrayList<String> listOnline = Func.readXML("online");
                Registry myRegistry = LocateRegistry.getRegistry(listOnline.get(0), 1099);

                // search for myMessage service
                Message impl = (Message) myRegistry.lookup("myMessage");
                
                results = impl.getPrescriptionNote(pmiNo);
                
            } else {
                String sql = "select * "
                        + "from pms_patient_biodata,pis_order_master "
                        + "where PIS_ORDER_MASTER.pmi_no = PMS_PATIENT_BIODATA.pmi_no "
                        + "AND pms_patient_biodata.pmi_no = ? ";
//            String sql="SELECT * "
//                    + "FROM PMS_PATIENT_BIODATA "
//                    + "WHERE PMI_NO = ?";
//            String sql="SELECT *" +
//                        "FROM PIS_ORDER_MASTER,PMS_PATIENT_BIODATA" +
//                        "WHERE PIS_ORDER_MASTER.pmi_no = PMS_PATIENT_BIODATA.pmi_no "
//                        + "AND PMI_NO = ?";
//            String sql="SELECT *" +
//                        "FROM PIS_ORDER_MASTER,PMS_PATIENT_BIODATA " +
//                        "WHERE PIS_ORDER_MASTER.pmi_no = PMS_PATIENT_BIODATA.pmi_no ";

                //prepare sql query and execute it
                PreparedStatement ps = Session.getCon_x(100).prepareStatement(sql);
                ps.setString(1, pmiNo);
                
                results = ps.executeQuery();
                
                ps.close();
            }

            while(results.next())
            {
                //create String objects to store data of results
                patientName = results.getString("PATIENT_NAME");
                gender = results.getString("SEX_CODE");
                dob = results.getString ("BIRTH_DATE");
                add = results.getString ("HOME_ADDRESS");
                add1 = results.getString("HOME_TOWN_CODE");
                add2 = results.getString("HOME_POSTCODE");
                add3 = results.getString("HOME_STATE_CODE");
                add4 = results.getString("HOME_COUNTRY_CODE");
                //ono = results.getString("ORDER_NO");
                
                
            }//end of while
            
            //clean the results and data
            results.close();

        }catch(Exception ex){
            System.out.println("setPrescription 2: "+ex);
        }

        //search drug prescribe
        try {
            
            S.oln("SEARCH DRUG nk displays");
//            String sql="SELECT * "
//                    + "FROM PMS_DRUG_DISPENSE "
//                    + "WHERE Medication_Form_Code = ?";
//                String sql1 = "SELECT *"
//                        + "FROM PIS_ORDER_MASTER,PIS_ORDER_DETAIL "
//                        + "WHERE PIS_ORDER_MASTER.ORDER_NO = PIS_ORDER_DETAIL.ORDER_NO ";
//                String sql1 = "SELECT * "
//                        + "FROM PIS_ORDER_MASTER,PIS_ORDER_DETAIL "
//                        + "WHERE PIS_ORDER_MASTER.PMI_NO = ? AND PIS_ORDER_DETAIL.ORDER_NO = ? ";
//                    String sql1 = "SELECT * "
//                            + "FROM PIS_ORDER_DETAIL "
//                            + "WHERE PIS_ORDER_DETAIL.ORDER_NO = ? ";
            
            ResultSet results1 = null;

            if (Session.getPrev_stat()) {
                // fire to server port 1099
                ArrayList<String> listOnline = Func.readXML("online");
                Registry myRegistry = LocateRegistry.getRegistry(listOnline.get(0), 1099);

                // search for myMessage service
                Message impl = (Message) myRegistry.lookup("myMessage");

                results1 = impl.getPrescriptionNote2(oNo);

            } else {
                String sql1 = "select * "
                        + "from pis_order_detail,pis_order_master "
                        + "where pis_order_master.order_no = pis_order_detail.order_no "
                        + "AND pis_order_detail.order_no = ? ";
//                 
                //prepare sql query and execute it
                PreparedStatement ps1 = Session.getCon_x(1000).prepareStatement(sql1);
                ps1.setString(1, oNo);
                results1 = ps1.executeQuery();

                ps1.close();
            }
            
            while (results1.next()) {
                /**
                 * cuba letak dlm sini
                 */
                //create String objects to store data of results
                productCode = results1.getString("DRUG_ITEM_CODE");
                productName = results1.getString("DRUG_ITEM_DESC");
                //dosage = results.getDouble("Dosage");
                //dosage1 = Double.toString(dosage);
                dosage = results1.getString("DRUG_DOSAGE");
                dosageForm = results1.getString("DRUG_FORM");
                frequency = results1.getString("DRUG_FREQUENCY");
                instruction = results1.getString("ORDER_OUM");
                qtyPerTime = results1.getDouble("QTY_ORDERED");
                qtyPerTime1 = Double.toString(qtyPerTime);
                duration = results1.getInt("Duration");
                duration1 = Integer.toString(duration);

                //identify frequency
                if ((frequency.equals("In the morning")) || (frequency.equals("At night")) || (frequency.equals("Daily"))) {
                    frequency1 = 1;
                } else if (frequency.equals("Twice a day")) {
                    frequency1 = 2;
                } else if ((frequency.equals("3 times a day")) || (frequency.equals("8 hourly"))) {
                    frequency1 = 3;
                } else if ((frequency.equals("4 times a day")) || (frequency.equals("6 hourly"))) {
                    frequency1 = 4;
                } else {
                    frequency1 = 6;
                }

                totalQty = frequency1 * qtyPerTime * duration;
                totalQty1 = Double.toString(totalQty);

                //create a vector to store data
                Vector<String> data = new Vector<String>();

                //add data into vector
                data.addElement(productName);
                data.addElement(dosage);
                data.addElement(dosageForm);
                data.addElement(route);
                data.addElement(frequency);
                data.addElement(instruction);
                data.addElement(qtyPerTime1);
                data.addElement(duration1);
                data.addElement(totalQty1);

                //write data into table
                ((DefaultTableModel) tbl_prescriptionSlip.getModel()).addRow(data);

                /**
                 * end of line
                 */
            }
            //clean the results and data
            results1.close();

        } catch (Exception ex) {
            System.out.println("setPrescription 1 " + ex);
        }
        

        //show patient biodata
        lbl_patientName1.setText(patientName);
        lbl_gender1.setText(gender);
        lbl_DOB1.setText(dob);
        lbl_address1.setText(add+" "+add1+" "+add2+" "+add3+" "+add4);
//        lbl_ono.setText(oNo);
        jLabel1.setText(oNo);
        //get time now
        java.sql.Timestamp dispenseDate = new java.sql.Timestamp(new java.util.Date().getTime());
        //convert to string
        dispenseDate1 = dispenseDate.toString();
        lbl_prescripDate1.setText(dispenseDate1);
        lbl_prescribeBy1.setText(staffName);
    }

    public void setDataDTO(String ehrdata) {
        MainRetrieval mr = new MainRetrieval();
        mr.startProcess(ehrdata);
        String dto[][] = mr.getData("DTO");
        int row = mr.getRowNums();
        
    }

    private void btn_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pdfActionPerformed
   
        Document document = new Document(PageSize.A4_LANDSCAPE.rotate());

        //try combine 19022013
        try {

            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addTitlePage(document);
            document.close();

            //open pdf after created
            Desktop.getDesktop().open(new File("asset/printpdf.pdf"));
        } catch (Exception e) {
            System.out.println("PDF E" + e);
        }

        S.oln("PDF created!");
        JOptionPane.showMessageDialog(null, "PDF created");

        
    }//GEN-LAST:event_btn_pdfActionPerformed
 

private void addTitlePage(Document document)
      throws DocumentException {
    
    //"Drug Name", "Dosage", "Dosage Form", "Route", "Frequency", "Instruction", "Qty", "Dur", "Tot Qty"
    float[] colsWidth = {2f, 0.5f, 1f, 0.5f, 1f, 1f, 0.5f, 0.5f, 0.5f}; // Code 1
    //PdfPTable table = new PdfPTable(9);
    PdfPTable table = new PdfPTable(colsWidth);
    table.setWidthPercentage(100);
    table.setHorizontalAlignment(Element.ALIGN_LEFT);

    PdfPCell c1 = new PdfPCell(new Phrase("Drug", sBold));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Dosage", sBold));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Dosage Form", sBold));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Route", sBold));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Frequency", sBold));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Instruction", sBold));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Qty", sBold));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Dur (days)", sBold));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Presc.Qty", sBold));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    table.setHeaderRows(1);

    /*
     * add data from table to the pdf cell to be print set the font
     */
    for (int j = 0; j < tbl_prescriptionSlip.getRowCount(); j++) {
        c1 = new PdfPCell(new Phrase(productName = (String) tbl_prescriptionSlip.getValueAt(j, 0), smallBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(dosage = (String) tbl_prescriptionSlip.getValueAt(j, 1), smallBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(dosageForm = (String) tbl_prescriptionSlip.getValueAt(j, 2), smallBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(route = (String) tbl_prescriptionSlip.getValueAt(j, 3), smallBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(frequency = (String) tbl_prescriptionSlip.getValueAt(j, 4), smallBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(instruction = (String) tbl_prescriptionSlip.getValueAt(j, 5), smallBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(qtyPerTime1 = (String) tbl_prescriptionSlip.getValueAt(j, 6), smallBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(duration1 = (String) tbl_prescriptionSlip.getValueAt(j, 7), smallBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(totalQty1 = (String) tbl_prescriptionSlip.getValueAt(j, 8), smallBold));
        table.addCell(c1);
    }

    Paragraph preface = new Paragraph();
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph("Prescription Slip" + " " + new Date(), catFont));

    addEmptyLine(preface, 1);

    String staffNm = lbl_prescribeBy1.getText();
//    String oNo = lbl_oNo.getText();
    String oNo = jLabel1.getText();

    preface.add(new Paragraph("Order No: " + oNo));
    preface.add(new Paragraph("Prescribe by: " + staffNm.toUpperCase() + " " + " Prescription Date :" + dispenseDate1, //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
            smallBold));
    preface.add(new Paragraph("Name: " + patientName.toUpperCase() + " " + " Gender: " + gender.toUpperCase() + " " + " DOB: " + dob + " ", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
            smallBold));
    preface.add(new Paragraph("Address: " + add.toUpperCase() + " " + add1.toUpperCase() + " " + add2.toUpperCase() + " " + add3.toUpperCase() + " " + add4.toUpperCase(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
            smallBold));

    addEmptyLine(preface, 1);

    document.add(preface);
    addEmptyLine(preface, 1);
    document.add(table);

    // Start a new page
    document.newPage();
   
    
  }
private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
}

    /**
    * @param args the command line arguments
    */

    public static void main(String args[]) {
      
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrescriptionNote().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btn_pdf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_DOB;
    private javax.swing.JLabel lbl_DOB1;
    private javax.swing.JLabel lbl_address;
    private javax.swing.JLabel lbl_address1;
    private javax.swing.JLabel lbl_gender;
    private javax.swing.JLabel lbl_gender1;
    private javax.swing.JLabel lbl_ono;
    private javax.swing.JLabel lbl_patientName;
    private javax.swing.JLabel lbl_patientName1;
    private javax.swing.JLabel lbl_prescribeBy;
    private javax.swing.JLabel lbl_prescribeBy1;
    private javax.swing.JLabel lbl_prescripDate;
    private javax.swing.JLabel lbl_prescripDate1;
    private java.awt.Label lbl_prescriptionSlip;
    private javax.swing.JTable tbl_prescriptionSlip;
    // End of variables declaration//GEN-END:variables

    
}
