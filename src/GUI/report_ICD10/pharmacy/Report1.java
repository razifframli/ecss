/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.report_ICD10.pharmacy;

//import javaapplication3.ReportModule;
import DBConnection.DBConnection;
import GUI.Login;
import Helper.J;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import static java.rmi.Naming.list;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import static java.util.Collections.list;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JTextFieldDateEditor;
import java.text.DateFormat;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Desktop;
import static java.awt.SystemColor.text;
import java.io.File;
import java.rmi.RemoteException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import main.RMIConnector;
//import static org.eclipse.persistence.jpa.jpql.utility.CollectionTools.list;

/**
 * Java class Report1
 * The class show the windows to generate report
 * @param message String variable to be printed
 * 
 * @author adam
 * @version 1.1, 22 Dec 2015
 */
public class Report1 extends javax.swing.JFrame {

    static File fi = new File(Login.class.getProtectionDomain().getCodeSource().getLocation().getPath());
//    static String par = fi.getParent()+"/";
    static String par = "";
    String logoUTeM = par+"logoUTeM/LogoUTeM2.gif";
    
    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    Connection conn1 = null;
    ResultSet rs1 = null;
    PreparedStatement pst1 = null;
    String Sub, Sub2, Sub3 = null;
    String sql, sql3 = null;
    String sqlWhere, sqlWhere2, sqlWhere3 = null;
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    java.util.Date d1, d2 = null;
    String date1, date2, date3, date4, RMTotal2 = null;
    double TotalPrice;
    int Price, RM2, usage, usage2;
    ArrayList<ArrayList<String>> data = null;
    
    //Declare PDF Report function
    private BaseFont bfBold;
    private BaseFont bf;
    private int pageNumber;
    
    private static String fileName = par+"Report_Pharmacy.pdf";

    /**
     * Creates new form Report1
     */
    public Report1() {
        initComponents();
//        fillcombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setText("Report Type:");

        jComboBox3.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox3PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Report and statistic of pharmacy");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Please Select-", "Total Drug Expenses" }));
        jComboBox1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabel9.setText("Facuty:");

        jComboBox2.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox2PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Category:");

        jDateChooser1.setDateFormatString("d MMMM yyyy");

        jLabel3.setText("From:");

        jLabel4.setText("To:");

        jDateChooser2.setDateFormatString("d MMMM yyyy");

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("GENERATE REPORT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(144, 144, 144))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addGap(18, 18, 18)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(144, 144, 144))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addContainerGap())))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox1PopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        String jcombox = (String) jComboBox1.getSelectedItem();
//        //ArrayList<String> list = new ArrayList<String>();
        Sub = jcombox;

        // Combo box data -> automatically change data content according to the 
        //choose
        if ("Total & Drug Type".equals(Sub)) {//report of total & drug type 
            //consist of 2 type :
            jComboBox3.removeAllItems();
            jComboBox3.addItem("That has been used");//1 type
            jComboBox3.addItem("That has been expired");//2 type
           
            //week();
            fillcombo();

        } else if ("Total Drug Expenses".equals(Sub)) {//report of Total Drug 
            //Expenses consist of 4 type :
            jComboBox3.removeAllItems();
            jComboBox3.addItem("ALL");//1 type
            jComboBox3.addItem("Student");//2 type
            jComboBox3.addItem("International Student");//3 type
            jComboBox3.addItem("Staff");//4 type
            
            
            fillcombo();

        } else if ("Stock Take & Stock Count".equals(Sub)) {//report of Stock 
            //Take & Stock Count consist of 3 type :
            jComboBox3.removeAllItems();
            jComboBox3.addItem("Total Drug in Storage & Drug Usage");//1 type
            jComboBox3.addItem("Batch Number");//2 type
            jComboBox3.addItem("Drug Type");//3 type
            
            
            fillcombo();

        } else {
            jComboBox3.removeAllItems();
            
//            jComboBox4.removeAllItems();
            jComboBox2.removeAllItems();

        }
    }//GEN-LAST:event_jComboBox1PopupMenuWillBecomeInvisible

    private void jComboBox2PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox2PopupMenuWillBecomeInvisible
        // TODO add your handling code here:
//        java.sql.Date sqldate = new java.sql.Date(jDateChooser1.getDate().getTime());
//            String comboB2 = (String) jComboBox2.getSelectedItem();
//            Sub2 = comboB2;
//            if (Sub3 == null) {
//                Sub3 = "ALL";
//            }
//
//            if (Sub2 == "-Please Select-") {
//
//            }else{
//            String pdfFilename = "Report of "+Sub;
//
//            try {
//
//                generateReportPDF(fileName);
//            } catch (SQLException ex) {
//                Logger.getLogger(Report1.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//    //        try {
//    //            //Report file will be open from this folder path
//    //            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\Report\\" + pdfFilename + "("+Sub3+"_" + Sub2 + ").pdf");
//    //        } catch (Exception e) { 
//    //            JOptionPane.showMessageDialog(null, "Error");
//    //        } 
//
//                if (Desktop.isDesktopSupported()) {
//                    try {
//                        File myFile = new File(fileName);
//                        Desktop.getDesktop().open(myFile);
//                    } catch (IOException ex) {
//                        // no application registered for PDFs
//                        J.o("PDF", "No application registered for PDFs", 0);
//                    }
//                }
//        }
        
    }//GEN-LAST:event_jComboBox2PopupMenuWillBecomeInvisible

    private void jComboBox3PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox3PopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        String comboB3 = (String) jComboBox3.getSelectedItem();
        Sub3 = comboB3;
        
        
//        String pdfFilename = "Report1";
//
//        try {
//
//            generateReportPDF(pdfFilename);
//        } catch (SQLException ex) {
//            Logger.getLogger(Report1.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        try {
//            //Report file will be open from this folder path
//            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\Report\\" + pdfFilename + "(" + Sub2 + ").pdf");
//        } catch (Exception e) { 
//            JOptionPane.showMessageDialog(null, "Error");
//        } 
        
        
    }//GEN-LAST:event_jComboBox3PopupMenuWillBecomeInvisible

//    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange

//    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String comboB2 = (String) jComboBox2.getSelectedItem();
        Sub2 = comboB2;
        if (Sub3 == null) {
            Sub3 = "ALL";
        }

        if (Sub2 == "-Please Select-") {

        } else {
            String pdfFilename = "Report of " + Sub;

            try {

                generateReportPDF(fileName);
            } catch (SQLException ex) {
                Logger.getLogger(Report1.class.getName()).log(Level.SEVERE, null, ex);
            }

    //        try {
            //            //Report file will be open from this folder path
            //            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\Report\\" + pdfFilename + "("+Sub3+"_" + Sub2 + ").pdf");
            //        } catch (Exception e) { 
            //            JOptionPane.showMessageDialog(null, "Error");
            //        } 
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File(fileName);
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    // no application registered for PDFs
                    J.o("PDF", "No application registered for PDFs", 0);
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws SQLException, DocumentException, FileNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Report1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Report1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Report1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Report1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Report1().setVisible(true);
            }
        });
    }


    private void fillcombo() {
        try {
            jComboBox2.removeAllItems();
            jComboBox2.addItem("-Please Select-");
            jComboBox2.addItem("ALL");
//        RMIConnector rc = new RMIConnector();
//        String host = "biocore-stag.utem.edu.my";// declaration host
//        int port = 1099; //declaration port //for now, stick to this port
            
            String sql2 = "Select distinct(centre_code) from lhr_medication order by centre_code";
//        ArrayList<ArrayList<String>> data2 = rc.getQuerySQL(host, port, sql2);// execute query
            String param[] = {};
            ArrayList<ArrayList<String>> data2 = DBConnection.getImpl().getQuery(sql2, 1, param);
            
            for (int i = 0; i < data2.size(); i++) {
                jComboBox2.addItem(data2.get(i).get(0));
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Report1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Begin PDF report////
    private void generateReportPDF(String pdfFilename) throws SQLException {
        try {
            Document doc = new Document(PageSize.A4, 36, 36, 64, 36);
            PdfWriter docWriter = null;
            initializeFonts();
            if (Sub3 == null) {
                Sub3 = "ALL";
            }
            
            if (date1==null && date2==null){
                sqlWhere = " ";
            } else{
                sqlWhere = " (episode_date between '" + date1 +"' and '" + date2+"') and \n";
            }
            
            if (Sub3==null || Sub3=="ALL"){
                sqlWhere2 = " ";
            } else if(Sub3=="Student"){
                sqlWhere2 = " length(national_id_no)=10 and \n";
            } else if(Sub3=="International Student"){
                sqlWhere2 = " length(national_id_no)=10 and length(person_id_no)!=12 and \n";
            }else if(Sub3=="Staff"){
                sqlWhere2 = " length(national_id_no)=5 and \n";
            }
            
            if (Sub2==null || Sub2=="ALL"){
                sqlWhere3 = " ";
            }else if(Sub2=="-Please Select-"){
                String infoMessage = "Please select faculty";
                JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
            }else{
                sqlWhere3 = "l.centre_code = '" + Sub2 + "' and ";
            }
            
//        RMIConnector rc = new RMIConnector();
//        String host = "biocore-stag.utem.edu.my";// declaration host
//        int port = 1099; //declaration port //for now, stick to this port
            
            sql3 = "select l.centre_code, "
                    + "l.drug_cd, "
                    + "l.drug_name, \n"
                    + "Sum(case when PERSON_STATUS='L' then 1 else 0 end) AS Male, \n"
                    + "Sum(case when PERSON_STATUS='P' then 1 else 0 end) AS Female, \n"
                    + "COUNT(l.drug_cd) as PTotal, COUNT(centre_code) as TTotal, \n"
                    + "COUNT(DISTINCT(l.drug_cd)) as MTotal, MONTH(Episode_date), \n"
                    + "p.D_SELL_PRICE as RM, \n"
                    + "COUNT(l.drug_cd*quantity)*p.D_SELL_PRICE as total_RM, sum(quantity) \n"
                    + "from servercis.lhr_medication AS l \n"
                    + "inner join servercis.pis_mdc2 AS p \n"
                    + "on l.drug_cd=p.UD_MDC_CODE \n"
                    + "where " + sqlWhere3 + " " + sqlWhere+ " "+sqlWhere2+"  l.drug_cd in \n"
                    + "( \n"
                    + "select UD_MDC_CODE from pis_mdc2 \n"
                    + ") \n"
                    + "group by l.drug_cd";
//        ArrayList<ArrayList<String>> data3 = rc.getQuerySQL(host, port, sql3);// execute query
            String param[] = {};
            ArrayList<ArrayList<String>> data3 = DBConnection.getImpl().getQuery(sql3, 12, param);// execute query
            
            System.out.println("data3:"+data3);
            System.out.println("size:"+data3.size());
            
            if (data3.size() <= 0) {
                String infoMessage = "There is no data in this range of date.\n"
                        + "Please select other date";
                JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
                
            } else {
                try {
                    //Report file will be save to this folder path
                    String path = "D:\\Report\\" + pdfFilename + "("+Sub3+"_" + Sub2 + ").pdf";
                    docWriter = PdfWriter.getInstance(doc, new FileOutputStream(fileName));
                    doc.addAuthor("Adam");
                    doc.addCreationDate();
                    doc.addProducer();
                    doc.addCreator("MySampleCode.com");
                    doc.addTitle("Report1");
                    doc.setPageSize(PageSize.LETTER);
                    
                    doc.open();
                    PdfContentByte cb = docWriter.getDirectContent();
                    
                    generateDetail(doc, cb);
                    
                } catch (DocumentException dex) {
                    dex.printStackTrace();
                } catch (Exception ex) {
                    ex.printStackTrace();
                } finally {
                    if (doc != null) {
                        doc.close();
                    }
                    if (docWriter != null) {
                        docWriter.close();
                    }
                }
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Report1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void generateDetail(Document doc, PdfContentByte cb) {//write detail
        //of report in pdf
        
        d1 = jDateChooser1.getDate();
        d2 = jDateChooser2.getDate();
        DateFormat fmt = new SimpleDateFormat("yyyy-MM-d");
        date1 = fmt.format(d1);
        date2 = fmt.format(d2);
        
        
        if (date1==null && date2==null){
            sqlWhere = " ";
        } else{
            sqlWhere = " (episode_date between '" + date1 +"' and '" + date2+"') and \n";
        } 
        
        if (Sub3==null || Sub3=="ALL"){
            sqlWhere2 = " ";
        } else if(Sub3=="Student"){
            sqlWhere2 = " length(national_id_no)=10 and \n";
        } else if(Sub3=="International Student"){
            sqlWhere2 = " length(national_id_no)=10 and length(person_id_no)!=12 and \n";
        }else if(Sub3=="Staff"){
            sqlWhere2 = " length(national_id_no)=5 and \n";
        } 
         
        if (Sub2==null || Sub2=="ALL"){
            sqlWhere3 = " ";
        }else if(Sub2=="-Please Select-"){
            String infoMessage = "Please select faculty";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
        }else{
            sqlWhere3 = "l.centre_code = '" + Sub2 + "' and ";
        }

        if (Sub == "Total & Drug Type") {

        } else if (Sub == "Total Drug Expenses") {
            if (Sub2 != null && Sub2 != "-Please Select-") {
                    sql = "select "
                            + "l.centre_code, "
                            + "l.drug_cd, "
                            + "l.drug_name, "
                            + "Sum(case when PERSON_STATUS='L' then 1 else 0 end) AS Male, "
                            + "Sum(case when PERSON_STATUS='P' then 1 else 0 end) AS Female, "
                            + "COUNT(l.drug_cd) as PTotal, "
                            + "COUNT(centre_code) as TTotal, "
                            + "COUNT(DISTINCT(l.drug_cd)) as MTotal, "
                            + "MONTH(Episode_date), "
                            + "p.D_SELL_PRICE as RM, "
                            + "sum(quantity)*p.D_SELL_PRICE as total_RM, "
                            + "sum(quantity) "
                            + "from servercis.lhr_medication AS l "
                            + "inner join servercis.pis_mdc2 AS p "
                            + "on l.drug_cd=p.UD_MDC_CODE "
                            + "where " + sqlWhere3 + " " + sqlWhere+ " "+sqlWhere2+"  l.drug_cd in "
                            + "( "
                            + "select UD_MDC_CODE from pis_mdc2 "
                            + ") "
                            + "group by l.drug_cd";

                report2(doc, cb);
                generateTotal(doc, cb);//the layout of pdf report
                createFooter(cb, 265, 30, "* * * End of Report * * *");

            } else {
                String infoMessage = "Please select something";
                JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
            }

        } else if (Sub == "Stock Take & Stock Count") {

        } else {

        }

    }

    private void report2(Document doc, PdfContentByte cb) {

        try {
            //        RMIConnector rc = new RMIConnector();
//        String host = "biocore-stag.utem.edu.my";// declaration host
//        int port = 1099; //declaration port //for now, stick to this port
//        ArrayList<ArrayList<String>> data = null;

//        data = rc.getQuerySQL(host, port, sql);
            String param[] = {};
            data = DBConnection.getImpl().getQuery(sql, 12, param);
            
            boolean beginPage = true;
            int y = 615;
            double RM3 = 0;
            double RM4 = 0;
            pageNumber = 0;
            Price = 0;
            TotalPrice = 0;
            RM2 = 0;
            usage = 0;
            usage2 = 0;
//            RMTotal2 = null;
            pageNumber = 0;
            
            if (data.size() <= 0) {
                String infoMessage = "hahahaThere is no data in this range of date.\n"
                        + "Please select other date";
                JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
                
            } else {
                //the layout and contain of pdf report
                for (int i = 0; i < data.size(); i++) {
                    if (beginPage) {
                        beginPage = false;
                        generateLayout(doc, cb);//the layout of pdf report
                        generateHeader(doc, cb);//the header of pdf report
                        y = 600;
                    }
                    ///content table
                    
                    try {//data contain in the table
                        DecimalFormat df = new DecimalFormat("0.00");
                        df.setMaximumFractionDigits(2);
                        createContent(cb, 63, y, String.valueOf(i + 1), PdfContentByte.ALIGN_RIGHT);//first column data
                        createContent(cb, 72, y, data.get(i).get(1), PdfContentByte.ALIGN_LEFT);//2nd column data
                        
                        String drugName = data.get(i).get(2);//3rd column data
                        
                        String RM = df.format(Double.parseDouble(data.get(i).get(9)));
                        createContent(cb, 445, y, RM, PdfContentByte.ALIGN_RIGHT);//4th column data

                        createContent(cb, 483, y, data.get(i).get(5), PdfContentByte.ALIGN_RIGHT);//5th column data
                        RM3 = Double.parseDouble(data.get(i).get(5));
                        RM2 = (int) RM3;
                        Price = Price + RM2;
                        
                        String quantity = data.get(i).get(11);
                        createContent(cb, 515, y, quantity, PdfContentByte.ALIGN_RIGHT);//6th column data
                        usage2 = (int) Double.parseDouble(data.get(i).get(11));
                        usage = usage + usage2;
                        
                        String RMTotal = df.format(Double.parseDouble(data.get(i).get(10)));
                        createContent(cb, 585, y, RMTotal, PdfContentByte.ALIGN_RIGHT);//7th column data
                        RM4 = Double.parseDouble(RMTotal);
                        TotalPrice = TotalPrice + RM4;
                        RMTotal2 = df.format(TotalPrice);
                        
//                    if (drugName.length() > 52) {
                        if (drugName.length() > 52) {
                            
                            for (int j = 0; j < drugName.length(); j += 47) {
                                String drugName2 = drugName.substring(j, Math.min(j + 47, drugName.length()));
                                createContent(cb, 145, y, drugName2, PdfContentByte.ALIGN_LEFT);//2nd column data
                                y = y - 15;
                            }
                            
                        } else {
                            createContent(cb, 145, y, drugName, PdfContentByte.ALIGN_LEFT);//3rd column data
                            y = y - 15;
                        }
                        
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    
                    if (y < 63) {
                        printPageNumber(cb);//the page number of pdf report
                        pageNumber++;
                        doc.newPage();
                        beginPage = true;
                    }
                }
                
                printPageNumber(cb);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Report1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void generateLayout(Document doc, PdfContentByte cb) {//layout of table

        try {

            cb.setLineWidth(1f);

            cb.rectangle(40, 70, 550, 580);//table line
            cb.moveTo(40, 615);//horizontal line of table
            cb.lineTo(590, 615);//horizontal line of table

            cb.moveTo(70, 70);//No line
            cb.lineTo(70, 650);
            cb.moveTo(143, 70);//Drug Code line
            cb.lineTo(143, 650);
            cb.moveTo(405, 70);//Desc line
            cb.lineTo(405, 650);
            cb.moveTo(450, 70);//Price line
            cb.lineTo(450, 650);
            cb.moveTo(487 , 70);//total patient line
            cb.lineTo(487, 650);
            cb.moveTo(520, 70);//Total Amount line
            cb.lineTo(520, 650);
            cb.stroke();

            // Report Detail box Text Headings 
            createHeadings(cb, 48, 633, "No");
            createHeadings(cb, 72, 633, "Drug Code");
            createHeadings(cb, 145, 633, "Description");
            createHeadings(cb, 415, 633, "Price");
            createHeadings(cb, 452, 633, "Total");
            createHeadings(cb, 452, 623, "Patient");
            createHeadings(cb, 489, 633, "Total");
            createHeadings(cb, 489, 623, "Usage");
            createHeadings(cb, 522, 633, "Total Amount");

            //add the images
            Image Logo = Image.getInstance(logoUTeM);
            Logo.setAbsolutePosition(260, 700);
            Logo.scalePercent(8);
            doc.add(Logo);

        } catch (DocumentException dex) {
            dex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void generateHeader(Document doc, PdfContentByte cb) {//pdf report header

        DateFormat fmt2 = new SimpleDateFormat("d/MM/yyyy");
        date3 = fmt2.format(d1);
        date4 = fmt2.format(d2);
        createHeadings(cb, 235, 680, "Drug Order List And Total Amount");
        if (date3 != null && date4 != null) {
            createHeadings(cb, 235, 665, "From " + date3 + " to " + date4 + "");
        } else if (date3 == null && date4 != null) {
            createHeadings(cb, 235, 660, "From the begining to " + date4 + "");
        } else {
            createHeadings(cb, 235, 660, "From the begining until today");
        }
        
        if (Sub3 == null) {
            Sub3 = "ALL";
        }
        createHeadings(cb, 45, 675, "Category : " + Sub3);
        createHeadings(cb, 45, 660, "Faculty/Centre : " + Sub2);
        
        createHeadings(cb, 465, 675, "Report ID: ECSS RPT 002");
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date date = new Date();
        createHeadings(cb, 465, 660, "Date: " + dateFormat.format(date));//06/08/2014
        

    }

    private void createHeadings(PdfContentByte cb, float x, float y, String text) {//header font & etc

        cb.beginText();
        cb.setFontAndSize(bfBold, 10);
        cb.setTextMatrix(x, y);
        cb.showText(text.trim());
        cb.endText();

    }
    
    private void generateTotal(Document doc, PdfContentByte cb) {//layout of table

        try {

            cb.setLineWidth(1f);
            
            cb.moveTo(40, 50);//horizontal line of total
            cb.lineTo(590, 50);//horizontal line of total
            cb.moveTo(40, 70);//vertical line of total
            cb.lineTo(40, 50);//vertical line of total
            cb.moveTo(450, 70);//vertical line of total
            cb.lineTo(450, 50);//vertical line of total
            cb.moveTo(487, 70);//vertical line of total
            cb.lineTo(487, 50);//vertical line of total
            cb.moveTo(520, 70);//vertical line of total
            cb.lineTo(520, 50);//vertical line of total
            cb.moveTo(590, 70);//vertical line of total
            cb.lineTo(590, 50);//vertical line of total
            createContent(cb, 390, 55, "Grand Total", PdfContentByte.ALIGN_LEFT);
            
            createContent(cb, 483, 55, ""+Price, PdfContentByte.ALIGN_RIGHT);
            createContent(cb, 515, 55, ""+usage, PdfContentByte.ALIGN_RIGHT);
            createContent(cb, 585, 55, ""+RMTotal2, PdfContentByte.ALIGN_RIGHT);

            cb.stroke();
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void createFooter(PdfContentByte cb, float x, float y, String text) {//header font & etc

        cb.beginText();
        cb.setFontAndSize(bfBold, 10);
        cb.setTextMatrix(x, y);
        cb.showText(text.trim());
        cb.endText();

    }
    
    private void printPageNumber(PdfContentByte cb) {//page number font & etc

        cb.beginText();
        cb.setFontAndSize(bfBold, 9);
        cb.showTextAligned(PdfContentByte.ALIGN_RIGHT, "Page No. " + (pageNumber + 1), 570, 12, 0);
        cb.endText();

//        pageNumber++;

    }

    private void createContent(PdfContentByte cb, float x, float y, String text, int align) {//data content font & etc

        cb.beginText();
        cb.setFontAndSize(bf, 10);
        cb.showTextAligned(align, text.trim(), x, y, 0);
        cb.endText();

    }

    //initialize font type
    private void initializeFonts() {//general font & etc

        try {
            bfBold = BaseFont.createFont(BaseFont.HELVETICA_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
            bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    //End PDF report////


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
